{block content}
<div class="jumbotron">
    <ul>
	<li>kvůli rychlosti vykreslování grafů se pro časové období delší než 7 dnů hodnoty agregují a průměrují</li>
	<li>aktualizace dat probíhá každých 5 minut</li>
	<li>vykreslení grafů může trvat delší dobu</li>
    </ul>
	{control dateForm}
</div>

<div id="curve_chart_all" style="height: 400px"></div>
{foreach $devices as $key => $device}
	<div id="curve_chart{$key}" style="height: 400px"></div>
	{if in_array($device->type, $deviceTypeList['r'])}
	    {* add another one chart for rain device *}
	    <div id="curve_chart{$key}r" style="height: 400px"></div>
	{/if}
{/foreach}

{/block}

{block scripts}
{include parent}
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript" n:syntax="double">
	google.charts.load('current', {'packages': ['corechart']});
	google.charts.setOnLoadCallback(drawChart);
	var data = {};
	function drawChart(redraw) {		
		var formatter_date = new google.visualization.DateFormat({pattern: "HH:mm - d. M. yyyy"});
		var formatter_temp = new google.visualization.NumberFormat({fractionDigits: 1, suffix: ' °C'});
		var formatter_hum = new google.visualization.NumberFormat({fractionDigits: 0, suffix: ' %'});
		var formatter_rain = new google.visualization.NumberFormat({fractionDigits: 1, suffix: ' mm'});
		var formatter_wind = new google.visualization.NumberFormat({fractionDigits: 1, suffix: ' m/s'});

		// -------------------------------------------------------------------------
		// Signle graph: Temperature & humidity | rain | wind
		// For each device generate DataTable & graph
		{{foreach $devices as $key => $device}}
		    {{if in_array($device->type, $deviceTypeList['t1'])}}
			if (redraw !== true) {
				data[{{$key}}] = new google.visualization.arrayToDataTable([
					[{label: 'Timestamp', type: 'date'},'Teplota'{{if in_array($device->type, $deviceTypeList['h'])}},'Vlhkost'{{/if}}],
                                        {{foreach $device->related('measurement')->select('ROUND(AVG(ts),1) AS ts, ROUND(AVG(h),1) AS h, ROUND(AVG(t1),1) AS t1')->where(array('ts >=' => $from, 'ts <=' => $to))->group('device_id, CONCAT(device_id, \'_\', FLOOR(ts/('.$groupMinutes.'*60)))') as $item}}
					    {{if in_array($device->type, $deviceTypeList['h'])}}
						    [new Date({{$item->ts * 1000}}), {{$item->t1}}, {{$item->h}}],
					    {{else}}
						    [new Date({{$item->ts * 1000}}), {{$item->t1}}],
					    {{/if}}
					{{/foreach}}
					{{if count($device->related('measurement')->select('ROUND(AVG(ts),1) AS ts, ROUND(AVG(h),1) AS h, ROUND(AVG(t1),1) AS t1')->where(array('ts >=' => $from, 'ts <=' => $to))->group('device_id, CONCAT(device_id, \'_\', FLOOR(ts/('.$groupMinutes.'*60)))')) == 0 }} 
						{{if in_array($device->type, $deviceTypeList['h'])}}
						    [new Date(0), 0, 0],
					    {{else}}
						    [new Date(0), 0],
					    {{/if}}
					{{/if}}
				]);
				formatter_date.format(data[{{$key}}], 0);
				formatter_temp.format(data[{{$key}}], 1);
				{{if in_array($device->type, $deviceTypeList['h'])}}
				    formatter_hum.format(data[{{$key}}], 2);
				{{/if}}
			}
			var options = {
			title: {{$device->name}} + ' (' + {{$device->related('measurement')->max('ts')|date:'H:i'}} + ')',
			legend: {position: 'bottom'},
			hAxis: {format: 'd. M. yyyy HH:mm', minValue: new Date({{$from * 1000}}), maxValue: new Date({{$to * 1000}})},
			{{if in_array($device->type, $deviceTypeList['h'])}}
			    series: {
				    0: {targetAxisIndex: 0,
				    {{if !empty($device->color)}}
					    color: {{$device->color}},
				    {{/if}}
				    },
				    1: {targetAxisIndex: 1, lineWidth: 1}
			    },
			    vAxes: {
				    0: {/*title: 'Teplota (°C)', */format:'#.# °C'},
				    1: {/*title: 'Vlhkost (%)' */ format:'# \'%\''}
			    },
			{{else}}

				    {{if !empty($device->color)}}
			    series: {
				    0: {color: {{$device->color}}}
			    },
				    {{/if}}

			    vAxis: {/*title: 'Teplota (°C)', */format:'#.# °C'},
			{{/if}}
			};

			var chart = new google.visualization.LineChart(document.getElementById('curve_chart' +{{$key}}));
			chart.draw(data[{{$key}}], options);
		    {{/if}}
		    {{if in_array($device->type, $deviceTypeList['r'])}}
			if (redraw !== true) {
				data[{{$key.'r'}}] = new google.visualization.arrayToDataTable([
					[{label: 'Timestamp', type: 'date'},'Srážky'],
					{{foreach $device->related('measurement')->select('ROUND(AVG(ts),1) AS ts,  ROUND(AVG(r),1) AS r')->where(array('ts >=' => $from, 'ts <=' => $to))->group('device_id, CONCAT(device_id, \'_\', FLOOR(ts/('.$groupMinutes.'*60)))') as $item}}
					    {{first}}{{var $start = $item->r}}{{/first}}
					    [new Date({{$item->ts * 1000}}), {{$item->r - $start}}],
					{{/foreach}}
					{{if count($device->related('measurement')->select('ROUND(AVG(ts),1) AS ts,  ROUND(AVG(r),1) AS r')->where(array('ts >=' => $from, 'ts <=' => $to))->group('device_id, CONCAT(device_id, \'_\', FLOOR(ts/('.$groupMinutes.'*60)))')) == 0 }} 
						[new Date(0), 0],
					{{/if}}
				]);
				formatter_date.format(data[{{$key.'r'}}], 0);
				formatter_rain.format(data[{{$key.'r'}}], 1);
			}
			var options = {
			title: {{$device->name}} + ' (' + {{$device->related('measurement')->max('ts')|date:'H:i'}} + ')',
			legend: {position: 'bottom'},
			hAxis: {format: 'd. M. yyyy HH:mm', minValue: new Date({{$from * 1000}}), maxValue: new Date({{$to * 1000}})},
			pointsVisible: true, 
			pointShape: 'circle',
			pointSize: 3,
				    {{if !empty($device->color)}}
			    series: {
				    0: {color: {{$device->color}}}
			    },
				    {{/if}}

			    vAxis: {/*title: 'Teplota (°C)', */format:'#.# mm'},
			};

			var chart = new google.visualization.LineChart(document.getElementById('curve_chart' +{{$key.'r'}}));
			chart.draw(data[{{$key.'r'}}], options);
			{{* I wanted to create derive type of chart here, but data are available only in time of rain, so I would need to create "false" zero data to make chart useful *}}
		    {{/if}}
		    {{if in_array($device->type, $deviceTypeList['wsgd'])}}
			if (redraw !== true) {
				data[{{$key}}] = new google.visualization.arrayToDataTable([
					[{label: 'Timestamp', type: 'date'},'Vítr rychlost', 'Vítr poryvy'],
					{{foreach $device->related('measurement')->select('ROUND(AVG(ts),1) AS ts, ROUND(AVG(ws),1) AS ws, ROUND(AVG(wg),1) AS wg')->where(array('ts >=' => $from, 'ts <=' => $to))->group('device_id, CONCAT(device_id, \'_\', FLOOR(ts/('.$groupMinutes.'*60)))') as $item}}
					    [new Date({{$item->ts * 1000}}), {{$item->ws}}, {{$item->wg}}],
					{{/foreach}}
					{{if count($device->related('measurement')->select('ROUND(AVG(ts),1) AS ts, ROUND(AVG(ws),1) AS ws, ROUND(AVG(wg),1) AS wg')->where(array('ts >=' => $from, 'ts <=' => $to))->group('device_id, CONCAT(device_id, \'_\', FLOOR(ts/('.$groupMinutes.'*60)))')) == 0 }} 
						[new Date(0), 0, 0],
					{{/if}}
				]);
				formatter_date.format(data[{{$key}}], 0);
				formatter_wind.format(data[{{$key}}], 1);
				formatter_wind.format(data[{{$key}}], 2);
			}
			var options = {
			title: {{$device->name}} + ' (' + {{$device->related('measurement')->max('ts')|date:'H:i'}} + ')',
			legend: {position: 'bottom'},
			hAxis: {format: 'd. M. yyyy HH:mm', minValue: new Date({{$from * 1000}}), maxValue: new Date({{$to * 1000}})},
				    {{if !empty($device->color)}}
			    series: {
				    0: {color: {{$device->color}}}
			    },
				    {{/if}}

			    vAxis: {/*title: 'Teplota (°C)', */format:'#.# m/s'},
			};

			var chart = new google.visualization.LineChart(document.getElementById('curve_chart' +{{$key}}));
			chart.draw(data[{{$key}}], options);
		    {{/if}}
		{{/foreach}}

		// -------------------------------------------------------------------------
		// Temperature ALL in ONE graph
		if (redraw !== true) {
			data["allinone"] = new google.visualization.arrayToDataTable([
			{{var $max = 0}}
			[{label: 'Timestamp', type: 'date'},{{foreach $devices as $device}}{{if in_array($device->type, $deviceTypeList['t1'])}}{{$device->name}},{{var $max = $max +1}}{{/if}}{{/foreach}}],
			{{var $current = 0}}
			{{foreach $devices as $device}}
			    {{if in_array($device->type, $deviceTypeList['t1'])}}
				{{var $count = 0}}
				{{foreach $device->related('measurement')->select('ROUND(AVG(ts),1) AS ts, ROUND(AVG(t1),1) AS t1')->where(array('ts >=' => $from, 'ts <=' => $to))->group('device_id, CONCAT(device_id, \'_\', FLOOR(ts/('.$groupMinutes.'*60)))') as $item}}
					[new Date({{$item->ts * 1000}}), 
					{{for $i = 0; $i < $max; $i++}}
						{{if $i == $current}}{{$item->t1}},{{else}}null,{{/if}}
					{{/for}}
					],
					{{var $count = $count +1}}
				{{/foreach}}
				{{if $count == 0}}
				    [new Date({{$from * 1000}}), 
				    {{for $i = 0; $i < $max; $i++}}
					    {{if $i == $current}}0,{{else}}null,{{/if}}
				    {{/for}}
				    ],
				{{/if}}
				{{var $current = $current +1}}
			    {{/if}}
			{{/foreach}}
			]);

			formatter_date.format(data["allinone"], 0);
			{{for $i = 0; $i < $max; $i++}}
			formatter_temp.format(data["allinone"], {{$i}} + 1);
			{{/for}}
		}
		var options = {
			title: 'Teplota ALL in ONE',
			legend: {position: 'bottom'},
			hAxis: {format: 'd. M. yyyy HH:mm', minValue: new Date({{$from * 1000}}), maxValue: new Date({{$to * 1000}})},
			vAxis: {/*title: 'Teplota (°C)', */format:'#.# °C'},
			series: {
		{{var $current = 0}}
		{{foreach $devices as $device}}
		{{if in_array($device->type, $deviceTypeList['t1'])}}
		{{if !empty($device->color)}}
				{{$current}}: {color: {{$device->color}}},
		{{/if}}
		{{var $current = $current +1}}
		{{/if}}
		{{/foreach}}			
			}
		};

		var chart = new google.visualization.LineChart(document.getElementById('curve_chart_all'));
		chart.draw(data["allinone"], options);
	}
</script>
{/block}
